State 38 conflicts: 1 shift/reduce
State 40 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: INT
    3    | STRING
    4    | NIL
    5    | BREAK
    6    | lvalue
    7    | assign
    8    | select
    9    | iter
   10    | func_call
   11    | arith
   12    | comparison
   13    | boolean_exp
   14    | MINUS exp
   15    | ID LBRACE records RBRACE
   16    | ID LBRACK exp RBRACK OF exp
   17    | LPAREN RPAREN
   18    | LPAREN exp_sequence RPAREN
   19    | LET dec_list IN exp_sequence END

   20 lvalue: ID
   21       | ID LBRACK exp RBRACK
   22       | lvalue LBRACK exp RBRACK
   23       | lvalue DOT ID

   24 assign: lvalue ASSIGN exp

   25 func_call: ID LPAREN exp_list RPAREN

   26 arith: exp PLUS exp
   27      | exp MINUS exp
   28      | exp TIMES exp
   29      | exp DIVIDE exp

   30 select: IF exp THEN exp ELSE exp
   31       | IF exp THEN exp

   32 boolean_exp: exp AND exp
   33            | exp OR exp

   34 records: record_list
   35        | ε

   36 record_list: record
   37            | record_list COMMA record

   38 record: ID EQ exp

   39 exp_sequence: exp
   40             | exp_sequence SEMICOLON exp

   41 exp_list: ε
   42         | exp_list_nonempty

   43 exp_list_nonempty: exp
   44                  | exp_list_nonempty COMMA exp

   45 iter: WHILE exp DO exp
   46     | FOR ID ASSIGN exp TO exp DO exp

   47 comparison: exp EQ exp
   48           | exp NEQ exp
   49           | exp GT exp
   50           | exp LT exp
   51           | exp GE exp
   52           | exp LE exp
   53           | exp LT GT exp

   54 dec_list: dec dec_list
   55         | ε

   56 dec: type_dec_list
   57    | variable_dec
   58    | function_dec_list

   59 function_dec_list: function_dec
   60                  | function_dec function_dec_list

   61 function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ exp
   62             | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp

   63 type_dec_list: type_dec
   64              | type_dec type_dec_list

   65 type_dec: TYPE ID EQ type

   66 type: ID
   67     | LBRACE type_fields RBRACE
   68     | ARRAY OF ID

   69 type_fields: type_field_list
   70            | ε

   71 type_field_list: type_field
   72                | type_field_list COMMA type_field

   73 type_field: ID COLON ID

   74 variable_dec: VAR ID ASSIGN exp
   75             | VAR ID COLON ID ASSIGN exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sval> (258) 15 16 20 21 23 25 38 46 61 62 65 66 68 73 74 75
    STRING <sval> (259) 3
    INT <ival> (260) 2
    COMMA (261) 37 44 72
    COLON (262) 62 73 75
    SEMICOLON (263) 40
    LPAREN (264) 17 18 25 61 62
    RPAREN (265) 17 18 25 61 62
    LBRACK (266) 16 21 22
    RBRACK (267) 16 21 22
    LBRACE (268) 15 67
    RBRACE (269) 15 67
    DOT (270) 23
    PLUS (271) 26
    MINUS (272) 14 27
    TIMES (273) 28
    DIVIDE (274) 29
    EQ (275) 38 47 61 62 65
    NEQ (276) 48
    LT (277) 50 53
    LE (278) 52
    GT (279) 49 53
    GE (280) 51
    AND (281) 32
    OR (282) 33
    ASSIGN (283) 24 46 74 75
    ARRAY (284) 68
    IF (285) 30 31
    THEN (286) 30 31
    ELSE (287) 30
    WHILE (288) 45
    FOR (289) 46
    TO (290) 46
    DO (291) 45 46
    LET (292) 19
    IN (293) 19
    END (294) 19
    OF (295) 16 68
    BREAK (296) 5
    NIL (297) 4
    FUNCTION (298) 61 62
    VAR (299) 74 75
    TYPE (300) 65
    LOW (301)
    UMINUS (302)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program <exp> (49)
        on left: 1
        on right: 0
    exp <exp> (50)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
        on right: 1 14 16 21 22 24 26 27 28 29 30 31 32 33 38 39 40 43 44 45 46 47 48 49 50 51 52 53 61 62 74 75
    lvalue <var> (51)
        on left: 20 21 22 23
        on right: 6 22 23 24
    assign <exp> (52)
        on left: 24
        on right: 7
    func_call <exp> (53)
        on left: 25
        on right: 10
    arith <exp> (54)
        on left: 26 27 28 29
        on right: 11
    select <exp> (55)
        on left: 30 31
        on right: 8
    boolean_exp <exp> (56)
        on left: 32 33
        on right: 13
    records <efieldlist> (57)
        on left: 34 35
        on right: 15
    record_list <efieldlist> (58)
        on left: 36 37
        on right: 34 37
    record <efield> (59)
        on left: 38
        on right: 36 37
    exp_sequence <explist> (60)
        on left: 39 40
        on right: 18 19 40
    exp_list <explist> (61)
        on left: 41 42
        on right: 25
    exp_list_nonempty <explist> (62)
        on left: 43 44
        on right: 42 44
    iter <exp> (63)
        on left: 45 46
        on right: 9
    comparison <exp> (64)
        on left: 47 48 49 50 51 52 53
        on right: 12
    dec_list <declist> (65)
        on left: 54 55
        on right: 19 54
    dec <dec> (66)
        on left: 56 57 58
        on right: 54
    function_dec_list <fundeclist> (67)
        on left: 59 60
        on right: 58 60
    function_dec <fundec> (68)
        on left: 61 62
        on right: 59 60
    type_dec_list <typedeclist> (69)
        on left: 63 64
        on right: 56 64
    type_dec <typedec> (70)
        on left: 65
        on right: 63 64
    type <type> (71)
        on left: 66 67 68
        on right: 65
    type_fields <fieldlist> (72)
        on left: 69 70
        on right: 61 62 67
    type_field_list <fieldlist> (73)
        on left: 71 72
        on right: 69 72
    type_field <field> (74)
        on left: 73
        on right: 71 72
    variable_dec <dec> (75)
        on left: 74 75
        on right: 57


State 0

    0 $accept: • program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program      go to state 12
    exp          go to state 13
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 1

   15 exp: ID • LBRACE records RBRACE
   16    | ID • LBRACK exp RBRACK OF exp
   20 lvalue: ID •
   21       | ID • LBRACK exp RBRACK
   25 func_call: ID • LPAREN exp_list RPAREN

    LPAREN  shift, and go to state 22
    LBRACK  shift, and go to state 23
    LBRACE  shift, and go to state 24

    $default  reduce using rule 20 (lvalue)


State 2

    3 exp: STRING •

    $default  reduce using rule 3 (exp)


State 3

    2 exp: INT •

    $default  reduce using rule 2 (exp)


State 4

   17 exp: LPAREN • RPAREN
   18    | LPAREN • exp_sequence RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 25
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp           go to state 26
    lvalue        go to state 14
    assign        go to state 15
    func_call     go to state 16
    arith         go to state 17
    select        go to state 18
    boolean_exp   go to state 19
    exp_sequence  go to state 27
    iter          go to state 20
    comparison    go to state 21


State 5

   14 exp: MINUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 28
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 6

   30 select: IF • exp THEN exp ELSE exp
   31       | IF • exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 29
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 7

   45 iter: WHILE • exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 30
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 8

   46 iter: FOR • ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 31


State 9

   19 exp: LET • dec_list IN exp_sequence END

    FUNCTION  shift, and go to state 32
    VAR       shift, and go to state 33
    TYPE      shift, and go to state 34

    $default  reduce using rule 55 (dec_list)

    dec_list           go to state 35
    dec                go to state 36
    function_dec_list  go to state 37
    function_dec       go to state 38
    type_dec_list      go to state 39
    type_dec           go to state 40
    variable_dec       go to state 41


State 10

    5 exp: BREAK •

    $default  reduce using rule 5 (exp)


State 11

    4 exp: NIL •

    $default  reduce using rule 4 (exp)


State 12

    0 $accept: program • $end

    $end  shift, and go to state 42


State 13

    1 program: exp •
   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 1 (program)


State 14

    6 exp: lvalue •
   22 lvalue: lvalue • LBRACK exp RBRACK
   23       | lvalue • DOT ID
   24 assign: lvalue • ASSIGN exp

    LBRACK  shift, and go to state 55
    DOT     shift, and go to state 56
    ASSIGN  shift, and go to state 57

    $default  reduce using rule 6 (exp)


State 15

    7 exp: assign •

    $default  reduce using rule 7 (exp)


State 16

   10 exp: func_call •

    $default  reduce using rule 10 (exp)


State 17

   11 exp: arith •

    $default  reduce using rule 11 (exp)


State 18

    8 exp: select •

    $default  reduce using rule 8 (exp)


State 19

   13 exp: boolean_exp •

    $default  reduce using rule 13 (exp)


State 20

    9 exp: iter •

    $default  reduce using rule 9 (exp)


State 21

   12 exp: comparison •

    $default  reduce using rule 12 (exp)


State 22

   25 func_call: ID LPAREN • exp_list RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 41 (exp_list)

    exp                go to state 58
    lvalue             go to state 14
    assign             go to state 15
    func_call          go to state 16
    arith              go to state 17
    select             go to state 18
    boolean_exp        go to state 19
    exp_list           go to state 59
    exp_list_nonempty  go to state 60
    iter               go to state 20
    comparison         go to state 21


State 23

   16 exp: ID LBRACK • exp RBRACK OF exp
   21 lvalue: ID LBRACK • exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 61
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 24

   15 exp: ID LBRACE • records RBRACE

    ID  shift, and go to state 62

    $default  reduce using rule 35 (records)

    records      go to state 63
    record_list  go to state 64
    record       go to state 65


State 25

   17 exp: LPAREN RPAREN •

    $default  reduce using rule 17 (exp)


State 26

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   39 exp_sequence: exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 39 (exp_sequence)


State 27

   18 exp: LPAREN exp_sequence • RPAREN
   40 exp_sequence: exp_sequence • SEMICOLON exp

    SEMICOLON  shift, and go to state 66
    RPAREN     shift, and go to state 67


State 28

   14 exp: MINUS exp •
   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    $default  reduce using rule 14 (exp)


State 29

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   30 select: IF exp • THEN exp ELSE exp
   31       | IF exp • THEN exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    THEN    shift, and go to state 68


State 30

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   45 iter: WHILE exp • DO exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    DO      shift, and go to state 69


State 31

   46 iter: FOR ID • ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 70


State 32

   61 function_dec: FUNCTION • ID LPAREN type_fields RPAREN EQ exp
   62             | FUNCTION • ID LPAREN type_fields RPAREN COLON ID EQ exp

    ID  shift, and go to state 71


State 33

   74 variable_dec: VAR • ID ASSIGN exp
   75             | VAR • ID COLON ID ASSIGN exp

    ID  shift, and go to state 72


State 34

   65 type_dec: TYPE • ID EQ type

    ID  shift, and go to state 73


State 35

   19 exp: LET dec_list • IN exp_sequence END

    IN  shift, and go to state 74


State 36

   54 dec_list: dec • dec_list

    FUNCTION  shift, and go to state 32
    VAR       shift, and go to state 33
    TYPE      shift, and go to state 34

    $default  reduce using rule 55 (dec_list)

    dec_list           go to state 75
    dec                go to state 36
    function_dec_list  go to state 37
    function_dec       go to state 38
    type_dec_list      go to state 39
    type_dec           go to state 40
    variable_dec       go to state 41


State 37

   58 dec: function_dec_list •

    $default  reduce using rule 58 (dec)


State 38

   59 function_dec_list: function_dec •
   60                  | function_dec • function_dec_list

    FUNCTION  shift, and go to state 32

    FUNCTION  [reduce using rule 59 (function_dec_list)]
    $default  reduce using rule 59 (function_dec_list)

    function_dec_list  go to state 76
    function_dec       go to state 38


State 39

   56 dec: type_dec_list •

    $default  reduce using rule 56 (dec)


State 40

   63 type_dec_list: type_dec •
   64              | type_dec • type_dec_list

    TYPE  shift, and go to state 34

    TYPE      [reduce using rule 63 (type_dec_list)]
    $default  reduce using rule 63 (type_dec_list)

    type_dec_list  go to state 77
    type_dec       go to state 40


State 41

   57 dec: variable_dec •

    $default  reduce using rule 57 (dec)


State 42

    0 $accept: program $end •

    $default  accept


State 43

   26 arith: exp PLUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 78
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 44

   27 arith: exp MINUS • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 79
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 45

   28 arith: exp TIMES • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 80
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 46

   29 arith: exp DIVIDE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 81
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 47

   47 comparison: exp EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 82
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 48

   48 comparison: exp NEQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 83
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 49

   50 comparison: exp LT • exp
   53           | exp LT • GT exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    GT      shift, and go to state 84
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 85
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 50

   52 comparison: exp LE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 86
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 51

   49 comparison: exp GT • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 87
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 52

   51 comparison: exp GE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 88
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 53

   32 boolean_exp: exp AND • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 89
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 54

   33 boolean_exp: exp OR • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 90
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 55

   22 lvalue: lvalue LBRACK • exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 91
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 56

   23 lvalue: lvalue DOT • ID

    ID  shift, and go to state 92


State 57

   24 assign: lvalue ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 93
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 58

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   43 exp_list_nonempty: exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 43 (exp_list_nonempty)


State 59

   25 func_call: ID LPAREN exp_list • RPAREN

    RPAREN  shift, and go to state 94


State 60

   42 exp_list: exp_list_nonempty •
   44 exp_list_nonempty: exp_list_nonempty • COMMA exp

    COMMA  shift, and go to state 95

    $default  reduce using rule 42 (exp_list)


State 61

   16 exp: ID LBRACK exp • RBRACK OF exp
   21 lvalue: ID LBRACK exp • RBRACK
   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    RBRACK  shift, and go to state 96
    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54


State 62

   38 record: ID • EQ exp

    EQ  shift, and go to state 97


State 63

   15 exp: ID LBRACE records • RBRACE

    RBRACE  shift, and go to state 98


State 64

   34 records: record_list •
   37 record_list: record_list • COMMA record

    COMMA  shift, and go to state 99

    $default  reduce using rule 34 (records)


State 65

   36 record_list: record •

    $default  reduce using rule 36 (record_list)


State 66

   40 exp_sequence: exp_sequence SEMICOLON • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 100
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 67

   18 exp: LPAREN exp_sequence RPAREN •

    $default  reduce using rule 18 (exp)


State 68

   30 select: IF exp THEN • exp ELSE exp
   31       | IF exp THEN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 101
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 69

   45 iter: WHILE exp DO • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 102
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 70

   46 iter: FOR ID ASSIGN • exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 103
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 71

   61 function_dec: FUNCTION ID • LPAREN type_fields RPAREN EQ exp
   62             | FUNCTION ID • LPAREN type_fields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 104


State 72

   74 variable_dec: VAR ID • ASSIGN exp
   75             | VAR ID • COLON ID ASSIGN exp

    COLON   shift, and go to state 105
    ASSIGN  shift, and go to state 106


State 73

   65 type_dec: TYPE ID • EQ type

    EQ  shift, and go to state 107


State 74

   19 exp: LET dec_list IN • exp_sequence END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp           go to state 26
    lvalue        go to state 14
    assign        go to state 15
    func_call     go to state 16
    arith         go to state 17
    select        go to state 18
    boolean_exp   go to state 19
    exp_sequence  go to state 108
    iter          go to state 20
    comparison    go to state 21


State 75

   54 dec_list: dec dec_list •

    $default  reduce using rule 54 (dec_list)


State 76

   60 function_dec_list: function_dec function_dec_list •

    $default  reduce using rule 60 (function_dec_list)


State 77

   64 type_dec_list: type_dec type_dec_list •

    $default  reduce using rule 64 (type_dec_list)


State 78

   26 arith: exp • PLUS exp
   26      | exp PLUS exp •
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    $default  reduce using rule 26 (arith)


State 79

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   27      | exp MINUS exp •
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    $default  reduce using rule 27 (arith)


State 80

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   28      | exp TIMES exp •
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    $default  reduce using rule 28 (arith)


State 81

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   29      | exp DIVIDE exp •
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    $default  reduce using rule 29 (arith)


State 82

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   47           | exp EQ exp •
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 47 (comparison)


State 83

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   48           | exp NEQ exp •
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 48 (comparison)


State 84

   53 comparison: exp LT GT • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 109
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 85

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   50           | exp LT exp •
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 50 (comparison)


State 86

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   52           | exp LE exp •
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 52 (comparison)


State 87

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   49           | exp GT exp •
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 49 (comparison)


State 88

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   51           | exp GE exp •
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 51 (comparison)


State 89

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   32            | exp AND exp •
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52

    $default  reduce using rule 32 (boolean_exp)


State 90

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   33            | exp OR exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53

    $default  reduce using rule 33 (boolean_exp)


State 91

   22 lvalue: lvalue LBRACK exp • RBRACK
   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    RBRACK  shift, and go to state 110
    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54


State 92

   23 lvalue: lvalue DOT ID •

    $default  reduce using rule 23 (lvalue)


State 93

   24 assign: lvalue ASSIGN exp •
   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 24 (assign)


State 94

   25 func_call: ID LPAREN exp_list RPAREN •

    $default  reduce using rule 25 (func_call)


State 95

   44 exp_list_nonempty: exp_list_nonempty COMMA • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 111
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 96

   16 exp: ID LBRACK exp RBRACK • OF exp
   21 lvalue: ID LBRACK exp RBRACK •

    OF  shift, and go to state 112

    $default  reduce using rule 21 (lvalue)


State 97

   38 record: ID EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 113
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 98

   15 exp: ID LBRACE records RBRACE •

    $default  reduce using rule 15 (exp)


State 99

   37 record_list: record_list COMMA • record

    ID  shift, and go to state 62

    record  go to state 114


State 100

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   40 exp_sequence: exp_sequence SEMICOLON exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 40 (exp_sequence)


State 101

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   30 select: IF exp THEN exp • ELSE exp
   31       | IF exp THEN exp •
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    ELSE    shift, and go to state 115

    $default  reduce using rule 31 (select)


State 102

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   45 iter: WHILE exp DO exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 45 (iter)


State 103

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   46 iter: FOR ID ASSIGN exp • TO exp DO exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    TO      shift, and go to state 116


State 104

   61 function_dec: FUNCTION ID LPAREN • type_fields RPAREN EQ exp
   62             | FUNCTION ID LPAREN • type_fields RPAREN COLON ID EQ exp

    ID  shift, and go to state 117

    $default  reduce using rule 70 (type_fields)

    type_fields      go to state 118
    type_field_list  go to state 119
    type_field       go to state 120


State 105

   75 variable_dec: VAR ID COLON • ID ASSIGN exp

    ID  shift, and go to state 121


State 106

   74 variable_dec: VAR ID ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 122
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 107

   65 type_dec: TYPE ID EQ • type

    ID      shift, and go to state 123
    LBRACE  shift, and go to state 124
    ARRAY   shift, and go to state 125

    type  go to state 126


State 108

   19 exp: LET dec_list IN exp_sequence • END
   40 exp_sequence: exp_sequence • SEMICOLON exp

    SEMICOLON  shift, and go to state 66
    END        shift, and go to state 127


State 109

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp
   53           | exp LT GT exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 53 (comparison)


State 110

   22 lvalue: lvalue LBRACK exp RBRACK •

    $default  reduce using rule 22 (lvalue)


State 111

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   44 exp_list_nonempty: exp_list_nonempty COMMA exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 44 (exp_list_nonempty)


State 112

   16 exp: ID LBRACK exp RBRACK OF • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 128
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 113

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   38 record: ID EQ exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 38 (record)


State 114

   37 record_list: record_list COMMA record •

    $default  reduce using rule 37 (record_list)


State 115

   30 select: IF exp THEN exp ELSE • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 129
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 116

   46 iter: FOR ID ASSIGN exp TO • exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 130
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 117

   73 type_field: ID • COLON ID

    COLON  shift, and go to state 131


State 118

   61 function_dec: FUNCTION ID LPAREN type_fields • RPAREN EQ exp
   62             | FUNCTION ID LPAREN type_fields • RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 132


State 119

   69 type_fields: type_field_list •
   72 type_field_list: type_field_list • COMMA type_field

    COMMA  shift, and go to state 133

    $default  reduce using rule 69 (type_fields)


State 120

   71 type_field_list: type_field •

    $default  reduce using rule 71 (type_field_list)


State 121

   75 variable_dec: VAR ID COLON ID • ASSIGN exp

    ASSIGN  shift, and go to state 134


State 122

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp
   74 variable_dec: VAR ID ASSIGN exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 74 (variable_dec)


State 123

   66 type: ID •

    $default  reduce using rule 66 (type)


State 124

   67 type: LBRACE • type_fields RBRACE

    ID  shift, and go to state 117

    $default  reduce using rule 70 (type_fields)

    type_fields      go to state 135
    type_field_list  go to state 119
    type_field       go to state 120


State 125

   68 type: ARRAY • OF ID

    OF  shift, and go to state 136


State 126

   65 type_dec: TYPE ID EQ type •

    $default  reduce using rule 65 (type_dec)


State 127

   19 exp: LET dec_list IN exp_sequence END •

    $default  reduce using rule 19 (exp)


State 128

   16 exp: ID LBRACK exp RBRACK OF exp •
   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 16 (exp)


State 129

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   30 select: IF exp THEN exp ELSE exp •
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 30 (select)


State 130

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   46 iter: FOR ID ASSIGN exp TO exp • DO exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54
    DO      shift, and go to state 137


State 131

   73 type_field: ID COLON • ID

    ID  shift, and go to state 138


State 132

   61 function_dec: FUNCTION ID LPAREN type_fields RPAREN • EQ exp
   62             | FUNCTION ID LPAREN type_fields RPAREN • COLON ID EQ exp

    COLON  shift, and go to state 139
    EQ     shift, and go to state 140


State 133

   72 type_field_list: type_field_list COMMA • type_field

    ID  shift, and go to state 117

    type_field  go to state 141


State 134

   75 variable_dec: VAR ID COLON ID ASSIGN • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 142
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 135

   67 type: LBRACE type_fields • RBRACE

    RBRACE  shift, and go to state 143


State 136

   68 type: ARRAY OF • ID

    ID  shift, and go to state 144


State 137

   46 iter: FOR ID ASSIGN exp TO exp DO • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 145
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 138

   73 type_field: ID COLON ID •

    $default  reduce using rule 73 (type_field)


State 139

   62 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON • ID EQ exp

    ID  shift, and go to state 146


State 140

   61 function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 147
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 141

   72 type_field_list: type_field_list COMMA type_field •

    $default  reduce using rule 72 (type_field_list)


State 142

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp
   75 variable_dec: VAR ID COLON ID ASSIGN exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 75 (variable_dec)


State 143

   67 type: LBRACE type_fields RBRACE •

    $default  reduce using rule 67 (type)


State 144

   68 type: ARRAY OF ID •

    $default  reduce using rule 68 (type)


State 145

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   46 iter: FOR ID ASSIGN exp TO exp DO exp •
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 46 (iter)


State 146

   62 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON ID • EQ exp

    EQ  shift, and go to state 148


State 147

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp
   61 function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 61 (function_dec)


State 148

   62 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ • exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 149
    lvalue       go to state 14
    assign       go to state 15
    func_call    go to state 16
    arith        go to state 17
    select       go to state 18
    boolean_exp  go to state 19
    iter         go to state 20
    comparison   go to state 21


State 149

   26 arith: exp • PLUS exp
   27      | exp • MINUS exp
   28      | exp • TIMES exp
   29      | exp • DIVIDE exp
   32 boolean_exp: exp • AND exp
   33            | exp • OR exp
   47 comparison: exp • EQ exp
   48           | exp • NEQ exp
   49           | exp • GT exp
   50           | exp • LT exp
   51           | exp • GE exp
   52           | exp • LE exp
   53           | exp • LT GT exp
   62 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp •

    PLUS    shift, and go to state 43
    MINUS   shift, and go to state 44
    TIMES   shift, and go to state 45
    DIVIDE  shift, and go to state 46
    EQ      shift, and go to state 47
    NEQ     shift, and go to state 48
    LT      shift, and go to state 49
    LE      shift, and go to state 50
    GT      shift, and go to state 51
    GE      shift, and go to state 52
    AND     shift, and go to state 53
    OR      shift, and go to state 54

    $default  reduce using rule 62 (function_dec)
